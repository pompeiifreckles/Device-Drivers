-> insmod, rmmod, modprobe
  insmod: it relies on syscall the function sys_init_module from kernel/module.h
    allocates kernel memory with vmalloc
    copies modules text into that memory region.
    resolves kernel references in module via kernel symbol table.
    calls the module's initialization function to get everything going.

  modprobe: like insmod, loads a module into the kernel.
    It differs in taht int will look at the modules to be loaded to see whether it references
    any symbols that are not currently defined in the kernel.
    modprobe looks for other modules in the current module search path that defines the relevant symbols.
    it also loads those modules into the kernels as well.

  rmmod: removes the module after eaxecuting the cleanup function.
    fails if the modules is busy (example - module has opened a file)

-> Version Dependency
  UTS_RELEASE: macro expands to string describing the version of the kernel. "2.6.10"
  LINUX_VERSION_CODE: returns version one byte per version release number. "2.6.10" -> 0x02060a (132618)
  KERNEL_VERSION(major, minor, release): returns kernel version in decimal. "2.6.10" -> 132618

-> Exporting symbols
  EXPORT_SYMBOL(name);
  EXPORT_SYMBOL_GPL(name);    _GPL makes the symbol available to only GPL-licensed modules

-> Preliminaries
  
  #include<linux/module.h>
  #include<linux/init.h>

  module.h  contains lots of symbols and functions for loadable modules
  init.h    contains initialization and cleanup function

  MODULE_LICENSE("GPL");

  specifies license identified by kernel. "GPL", "GPL v2", "GPL and additional rights", "Dual BSD/GPL", "Dual MPL/GPL" and "Proprietary"(default)

-> Initialization and Shutdown
  static int __init initialization_function(void) {
    /* Initialization code here */
  }
  
  module_init(initialization_function);

  __init (and __initdata) are optional but worth the effort. The module loader drops the intialization function (and data structures) and clears the memory after its loaded.
  __devinit (and __devinitdata) are for kernels not configured for hotpluggable devices

-> Cleanup Function
  
  static void __exit cleanup_function(void) {
    /* Cleanup code goes here */
  }

  module_exit(cleanup_function);

  The cleanup function has no value to return, so it is declared void
  __exit modifier marks for unload only. If module is built directly into kernel it is discarded
  __exit functions are called only at the time of unload and shutdown, any other use is an error

-> Module Parameters: moduleparam.h
  
  insmod hellop howmany=10 whom="Mom"

    static char *whom = "world";
    static int howmany = 1;
    module_param(howmany, int, S_IRUGO);
    module_param(whom, charp, S_IRUGO);

    data types:
    bool, invbool
    charp
    int
    long
    short
    uint
    ulong
    ushort
    
    Array parameters:
    mdoule_param_array(name, type, num, perm);
    name - name of the array
    num - number of elements

    permission: <linux/stat.h>
    this value controls who can access the representation of module parameter in sysfs
    perm is set to 0, there is nos sysfs entry at all; otherwise appears in /sys/module
    S_IRUGO           read-only
    S_IRUGO|S_IWUSR   read and write

    NOTE: you should not make module parameters writable, unless you are prepared to detect the change and react accordingly.
